import os
import sys
import optparse
import ROOT
import commands
import getpass
import pickle
import numpy
import copy
from subprocess import Popen, PIPE, STDOUT

from TopLJets2015.TopAnalysis.Plot import *
from TopLJets2015.TopAnalysis.dataCardTools import *

def noPartIn(a,b) :
        return 0 == len([c for c in b if (a in c or c in a)])

def buildRateUncertainty(varDn,varUp):
    """ returns a uniformized string for the datacard for the treatment of up/down rate uncertainties """

    #if this is below 0.1% neglect it
    if abs(varUp-1)<0.001 and abs(varDn-1)<0.001: return None

    #distinguish same sided from double sided variations
    toReturn=None
    if varUp>1. and varDn>1.:
        satUnc=min(max(varUp,varDn),2.0)
        toReturn='%3.3f'%satUnc
    elif varUp<1. and varDn<1.:
        satUnc=max(min(varUp,varDn),1/2.0)
        toReturn='%3.3f'%satUnc
    else:
        toReturn='%3.3f/%3.3f'%(varDn,varUp)

    #all done here
    return toReturn

def getDistsFromDirIn(url,indir,applyFilter=''):
    """customize getting the distributions for hypothesis testing"""
    fIn=ROOT.TFile.Open(url)
    obs,exp=getDistsFrom(fIn.Get(indir),applyFilter)
    fIn.Close()
    return obs,exp

def getRowFromTH2(tempHist2D,columnName) :
    """projects a given row in a 2D histogram relying on the y-axis label"""
    tempBinNum = tempHist2D.GetYaxis().FindBin(columnName);
    new1DProj  = tempHist2D.ProjectionX(tempHist2D.GetName()+"_"+columnName,
            tempBinNum,
            tempBinNum) #.Clone(tempHist2D.GetName())
    new1DProj.SetDirectory(0)
    return new1DProj


def getDistsForHypoTest(cat,rawSignalList,opt,outDir="",systName="",systIsGen=False):
    """readout distributions from ROOT file and prepare them to be used in the datacard"""

    # do we want systematics?
    systExt = ""
    if systIsGen        : systExt = "_gen"
    elif systName != "" : systExt = "_exp"

    # get main dists for data and backgrounds
    obs,bkg=getDistsFromDirIn(opt.input,'%s_w100%s'%(opt.dist,systExt))
    smHypo={}
    for rawSignal in rawSignalList:
        smHypo[rawSignal]=bkg[rawSignal]
        del bkg[rawSignal]

    #get main hypo
    _,mainHypo=getDistsFromDirIn(opt.input,'%s_w%.0f%s'%(opt.dist,opt.mainHypo,systExt))
    for proc in [proc for proc in mainHypo if proc in bkg]: del mainHypo[proc]

    #get alternative hypo
    _,altHypo=getDistsFromDirIn(opt.input,'%s_w%.0f%s'%(opt.dist,opt.altHypo,systExt))

    # for 2D measurement: load mass template from correct file, with appropriate names
    if len(opt.altHypoFromSim)>0 :
        _,altHypo=getDistsFromDirIn(opt.systInput,'%s_w%.0f%s'%(opt.dist,opt.altHypo,systExt))
        altHypo = {k.replace(opt.altHypoFromSim,""): v
                        for k, v in altHypo.items()
                        if opt.altHypoFromSim in v.GetName()}

    for proc in [proc for proc in altHypo if proc in bkg]: del altHypo[proc]

    #force the yields to be preserved for alternative hypothesis wrt to the SM expectations
    #if systematics were required we convert the TH2 to the corresponding row
    exp={}
    for proc in bkg:
        if systName != "" :
            bkg[proc] = getRowFromTH2(bkg[proc],systName)
        exp[proc]=bkg[proc]
    for proc in smHypo:
        if systName != "" :
            smHypo[proc] = getRowFromTH2(smHypo[proc],systName)
    for proc in mainHypo:
        if systName != "" :
            mainHypo[proc] = getRowFromTH2(mainHypo[proc],systName)
        nbins=smHypo[proc].GetNbinsX()
        sf=smHypo[proc].Integral(0,nbins+1)/mainHypo[proc].Integral(0,nbins+1)
        mainHypo[proc].Scale(sf)
        newProc='%sw%d'%(proc,opt.mainHypo)
        exp[newProc]=mainHypo[proc].Clone(newProc)
        exp[newProc].SetDirectory(0)
    for proc in altHypo:
        if systName != "" :
            altHypo[proc] = getRowFromTH2(altHypo[proc],systName)
        nbins=altHypo[proc].GetNbinsX()
        sf=smHypo[proc].Integral(0,nbins+1)/altHypo[proc].Integral(0,nbins+1)
        altHypo[proc].Scale(sf)
        newProc='%sw%d'%(proc,opt.altHypo)
        if opt.altHypo==opt.mainHypo : newProc+='a'
        exp[newProc]=altHypo[proc].Clone(newProc)
        exp[newProc].SetDirectory(0)



    return obs,exp,bkg,smHypo


"""
prepare the steering script for combine
"""
def doCombineScript(opt,args,outDir,dataCardList):

    altHypoTag=('w%.0f'%opt.altHypo).replace('.','p')
    if opt.altHypo==opt.mainHypo : altHypoTag+='a'

    scriptname='%s/steerHypoTest.sh'%outDir
    script=open(scriptname,'w')
    print 'Starting script',scriptname
    script.write('#\n')
    script.write('# Generated by %s with git hash %s for standard (alternative) hypothesis %.0f (%.0f)\n'%(getpass.getuser(),commands.getstatusoutput('git log --pretty=format:\'%h\' -n 1')[1],opt.mainHypo,opt.altHypo) )
    script.write('### environment setup\n')
    script.write('COMBINE=%s\n'%opt.combine)
    script.write('SCRIPTDIR=`dirname ${0}`\n')
    script.write('cd ${COMBINE}\n')
    script.write('eval `scramv1 r -sh`\n')
    script.write('cd ${SCRIPTDIR}\n')
    script.write('\n')

    script.write('### combine datacard and start workspace\n')
    script.write('combineCards.py %s > datacard.dat\n'%dataCardList)
    script.write('\n')

    script.write('### convert to workspace\n')
    script.write('text2workspace.py datacard.dat -P HiggsAnalysis.CombinedLimit.TopHypoTest:twoHypothesisTest -m 172.5 --PO verbose --PO altSignal=%s --PO muFloating -o workspace.root\n'%altHypoTag)
    script.write('\n')

    def writeScanToScript(testStat,script):
        extraName='_'+testStat
        commonOpts="-m 172.5 -M HybridNew --testStat=%s --onlyTestStat --saveToys --saveHybridResult --minimizerAlgo Minuit2"%(testStat)
        if hasattr(opt,"frzString") and opt.frzString != "" :
            commonOpts += " --freezeNuisances %s"%opt.frzString
        script.write("combine %s --singlePoint 0  workspace.root -n scan0n\n"%commonOpts)
        script.write("mv higgsCombinescan0n.HybridNew.mH172.5.123456.root testStat_scan0n%s.root\n"%extraName)
        script.write("combine %s --singlePoint 1  workspace.root -n scan1n\n"%commonOpts)
        script.write("mv higgsCombinescan1n.HybridNew.mH172.5.123456.root testStat_scan1n%s.root\n"%extraName)

    script.write('### SCAN \n')
    script.write('\n')
    for testStat in ['LEP','TEV','PL']: writeScanToScript(testStat=testStat,script=script)

    script.write('\n')
    script.close()

    return scriptname

"""
instantiates one datacard per category
"""
def doDataCards(opt,args):

    # what are our signal processes?
    rawSignalList=opt.signal.split(',')
    ttScenarioList=['tbart']
    mainSignalList,altSignalList=[],[]
    if 'tbart' in rawSignalList:
        ttScenarioList = ['tbartw%d'%h for h in [opt.mainHypo,opt.altHypo]]
        if opt.mainHypo==opt.altHypo: ttScenarioList[1]+='a'
        mainSignalList += [ttScenarioList[0]]
        altSignalList  += [ttScenarioList[1]]
    tWScenarioList=['Singletop']
    if 'Singletop' in rawSignalList:
        tWScenarioList = ['Singletopw%d'%h for h in [opt.mainHypo,opt.altHypo]]
        if opt.mainHypo==opt.altHypo: tWScenarioList[1]+='a'
        mainSignalList += [tWScenarioList[0]]
        altSignalList  += [tWScenarioList[1]]


    #define RATE systematics : syst,val,pdf,whiteList,blackList  (val can be a list of values [-var,+var])
    rateSysts=[]

    # prepare output directory
    outDir='%s/hypotest_%.0fvs%.0f%s'%(opt.output, opt.mainHypo,opt.altHypo,'sim'+opt.altHypoFromSim if len(opt.altHypoFromSim)!=0 else '')
    if opt.pseudoData==-1 : outDir += '_data'
    else:
        outDir += '_%.0f'%opt.pseudoData
        if len(opt.pseudoDataFromSim)!=0   : outDir+='sim_'
        outDir += 'pseudodata'
    os.system('mkdir -p %s'%outDir)
    os.system('rm -rf %s/*'%outDir)

    # prepare output ROOT file
    outFile='%s/shapes.root'%outDir
    fOut=ROOT.TFile.Open(outFile,'RECREATE')
    fOut.Close()

    # parse the categories to consider
    dataCardList=''
    for cat in opt.cat.split(','):
        lfs='EE'
        if 'EM' in cat : lfs='EM'
        if 'MM' in cat : lfs='MM'

        #data and nominal shapes
        obs,exp,bkg,smHypo=getDistsForHypoTest(cat,rawSignalList,opt,outDir)

        #recreate data if requested
        if opt.pseudoData!=-1:
            pseudoSignal=None
            print '\t pseudo-data is being generated',
            if len(opt.pseudoDataFromSim) and opt.systInput:
                print 'injecting signal from',opt.pseudoDataFromSim
                pseudoDataFromSim=opt.pseudoDataFromSim.replace('_',' ')
                _,pseudoSignalRaw=getDistsFromDirIn(opt.systInput,'%s_w%.0f'%(opt.dist,opt.mainHypo),pseudoDataFromSim)
                pseudoSignal={}
                pseudoSignal['tbart']=pseudoSignalRaw.popitem()[1]
            elif len(opt.pseudoDataFromWgt):
                print 'injecting signal from',opt.pseudoDataFromWgt
                _,pseudoSignal=getDistsFromDirIn(opt.input,'%s%s_w%.0f'%(opt.pseudoDataFromWgt,opt.dist,opt.mainHypo),'t#bar{t}')
                print pseudoSignal,'%s_%s_w%.0f'%(opt.pseudoDataFromWgt,opt.dist,opt.mainHypo)
            else:
                print 'injecting signal from weighted',opt.pseudoData
                _,pseudoSignal=getDistsFromDirIn(opt.input,'%s_w%.0f'%(opt.dist,opt.pseudoData))

            print 'Recreating data from'
            obs.Reset('ICE')
            for proc in bkg:
                print '\t %s %3.0f'%(proc,bkg[proc].Integral())
                obs.Add(bkg[proc])

            pseudoSignal={}
            if len(opt.pseudoDataFromSim) and opt.systInput:
                pseudoDataFromSim=opt.pseudoDataFromSim.replace('_',' ')
                pseudoSignal=getDistsFromDirIn(opt.systInput,'%s_w100'%(opt.dist),pseudoDataFromSim)
            else:
                _,pseudoSignal=getDistsFromDirIn(opt.input,'%s_w%d'%(opt.dist,opt.pseudoData))
            for proc in pseudoSignal:
                if not proc in rawSignalList : continue
                print "\t\t Including:", proc, pseudoSignal[proc].GetName()
                nbins=smHypo[proc].GetNbinsX()
                sf=smHypo[proc].Integral(0,nbins+1)/pseudoSignal[proc].Integral(0,nbins+1)
                pseudoSignal[proc].Scale(sf)
                print '\t %s %3.0f (sf=%3.2f)'%(proc,pseudoSignal[proc].Integral(),sf)

                if opt.rndmPseudoSF :
                    from random import uniform
                    pseudoSignal[proc].Scale(uniform(0.99,1.01))

                obs.Add( pseudoSignal[proc] )

            #round up to integers
            for xbin in xrange(0,obs.GetNbinsX()+2): obs.SetBinContent(xbin,int(obs.GetBinContent(xbin)))
            print '\t Total events in pseudo-data %d'%obs.Integral()

        #start the datacard header
        datacardname='%s/datacard_%s.dat'%(outDir,cat)
        dataCardList+='%s=%s '%(cat,os.path.basename(datacardname))

        datacard=open(datacardname,'w')
        print 'Starting datacard',datacardname
        datacard.write('#\n')
        datacard.write('# Generated by %s with git hash %s for analysis category %s\n' % (getpass.getuser(),
                                                                                          commands.getstatusoutput('git log --pretty=format:\'%h\' -n 1')[1],
                                                                                          cat) )
        datacard.write('#\n')
        datacard.write('imax *\n')
        datacard.write('jmax *\n')
        datacard.write('kmax *\n')
        datacard.write('-'*50+'\n')
        datacard.write('shapes *        * shapes.root %s/$PROCESS %s_$SYSTEMATIC/$PROCESS\n'%(opt.dist,opt.dist))

        #observation
        datacard.write('-'*50+'\n')
        datacard.write('bin 1\n')
        datacard.write('observation %3.1f\n' % obs.Integral())

        #nominal expectations
        print '\t nominal expectations',len(exp)-1
        datacard.write('-'*50+'\n')
        datacard.write('\t\t\t %16s'%'bin')
        for i in xrange(0,len(exp)): datacard.write('%15s'%'1')
        datacard.write('\n')
        datacard.write('\t\t\t %16s'%'process')
        for sig in mainSignalList: datacard.write('%15s'%sig)
        for sig in altSignalList:  datacard.write('%15s'%sig)
        for proc in exp:
            if proc in mainSignalList+altSignalList : continue
            datacard.write('%15s'%proc)
        datacard.write('\n')
        datacard.write('\t\t\t %16s'%'process')
        procCtr=-len(mainSignalList)-len(altSignalList)+1
        for sig in mainSignalList:
            datacard.write('%15s'%str(procCtr))
            procCtr+=1
        for sig in altSignalList:
            datacard.write('%15s'%str(procCtr))
            procCtr+=1
        for proc in exp:
            if proc in mainSignalList+altSignalList : continue
            datacard.write('%15s'%str(procCtr))
            procCtr+=1
        datacard.write('\n')
        datacard.write('\t\t\t %16s'%'rate')
        for sig in mainSignalList: datacard.write('%15s'%('%3.2f'%(exp[sig].Integral())))
        for sig in altSignalList:
            #if 'Singletop' in sig : sig = 'Singletopw100'
            datacard.write('%15s'%('%3.2f'%(exp[sig].Integral())))
        for proc in exp:
            if proc in mainSignalList+altSignalList : continue
            datacard.write('%15s'%('%3.2f'%(exp[proc].Integral())))
        datacard.write('\n')
        datacard.write('-'*50+'\n')

        #save to nominal to shapes file
        nomShapes=exp.copy()
        nomShapes['data_obs']=obs
        saveToShapesFile(outFile,nomShapes,('%s'%(opt.dist)),opt.rebin)

        #MC stats systematics for bins with large stat uncertainty
        if opt.addBinByBin>0:
            for proc in exp:
                finalNomShape=exp[proc].Clone('tmp')
                if opt.rebin : finalNomShape.Rebin(opt.rebin)

                for xbin in xrange(1,finalNomShape.GetXaxis().GetNbins()+1):
                    val,unc=finalNomShape.GetBinContent(xbin),finalNomShape.GetBinError(xbin)
                    if val==0 : continue
                    if ROOT.TMath.Abs(unc/val)<opt.addBinByBin: continue

                    binShapes={}
                    systVar='%sbin%d%s'%(proc,xbin,cat)

                    binShapes[proc]=finalNomShape.Clone('%sUp'%systVar)
                    binShapes[proc].SetBinContent(xbin,val+unc)
                    saveToShapesFile(outFile,binShapes,binShapes[proc].GetName())

                    binShapes[proc]=finalNomShape.Clone('%sDown'%systVar)
                    binShapes[proc].SetBinContent(xbin,ROOT.TMath.Max(val-unc,1e-3))
                    saveToShapesFile(outFile,binShapes,binShapes[proc].GetName())

                    #write to datacard
                    datacard.write('%32s shape'%systVar)
                    for sig in mainSignalList:
                        if proc==sig:
                            datacard.write('%15s'%'1')
                        else:
                            datacard.write('%15s'%'-')
                    for sig in altSignalList:
                        if proc==sig:
                            datacard.write('%15s'%'1')
                        else:
                            datacard.write('%15s'%'-')
                    for iproc in exp:
                        if iproc in mainSignalList+altSignalList : continue
                        if iproc==proc:
                            datacard.write('%15s'%'1')
                        else:
                            datacard.write('%15s'%'-')
                    datacard.write('\n')

                finalNomShape.Delete()


        #rate systematics: these are fixed values common to all processes
        print '\t rate systematics',len(rateSysts)
        for syst,val,pdf,whiteList,blackList in rateSysts:
            if '*CH*' in syst : syst=syst.replace('*CH*',lfs)
            datacard.write('%32s %8s'%(syst,pdf))
            entryTxt=''
            try:
                entryTxt='%15s'%('%3.3f/%3.3f'%(ROOT.TMath.Max(val[0],0.01),val[1]))
            except:
                entryTxt='%15s'%('%3.3f'%val)
            for sig in mainSignalList:
                if (len(whiteList)==0 and not sig in blackList) or sig in whiteList:
                    datacard.write(entryTxt)
                else:
                    datacard.write('%15s'%'-')
            for sig in altSignalList:
                if (len(whiteList)==0 and not sig in blackList) or sig in whiteList:
                    datacard.write(entryTxt)
                else:
                    datacard.write('%15s'%'-')
            for proc in exp:
                if proc in mainSignalList+altSignalList : continue
                if (len(whiteList)==0 and not proc in blackList) or proc in whiteList:
                    datacard.write(entryTxt)
                else:
                    datacard.write('%15s'%'-')
            datacard.write('\n')

        print '\t ended datacard generation'
        datacard.close()

    return outDir,dataCardList

"""
steer the script
"""
def main():

    #ROOT.gROOT.SetBatch()
    ROOT.gStyle.SetOptTitle(0)
    ROOT.gStyle.SetOptStat(0)

    #configuration
    usage = 'usage: %prog [options]'
    parser = optparse.OptionParser(usage)
    parser.add_option(      '--combine',            dest='combine',            help='CMSSW_BASE for combine installation',         default=None,        type='string')
    parser.add_option('-i', '--input',              dest='input',              help='input plotter',                               default=None,        type='string')
    parser.add_option(      '--systInput',          dest='systInput',          help='input plotter for systs from alt samples',    default=None,        type='string')
    parser.add_option('-d', '--dist',               dest='dist',               help='distribution',                                default='minmlb',    type='string')
    parser.add_option(      '--nToys',              dest='nToys',              help='toys to through for CLs',                     default=2000,        type=int)
    parser.add_option('--addBinByBin',              dest='addBinByBin', help='add bin-by-bin stat uncertainties @ threshold',      default=-1,            type=float)
    parser.add_option(      '--rebin',              dest='rebin',       help='histogram rebin factor',                             default=0,             type=int)
    parser.add_option(      '--pseudoData',         dest='pseudoData',         help='pseudo data to use (-1=real data)',           default=100,         type=float)
    parser.add_option(      '--useAltRateUncs',     dest='useAltRateUncs',     help='use rate uncertainties specific to alt. hypothesis', default=False,       action='store_true')
    parser.add_option(      '--replaceDYshape',     dest='replaceDYshape',     help='use DY shape from syst file',                 default=False,       action='store_true')
    parser.add_option(      '--doValidation',       dest='doValidation',       help='create validation plots',                     default=False,       action='store_true')
    parser.add_option(      '--rndmPseudoSF',       dest='rndmPseudoSF',       help='multiply pseudodate by random SF?',           default=False,       action='store_true')
    parser.add_option(      '--pseudoDataFromSim',  dest='pseudoDataFromSim',  help='pseudo data from dedicated sample',           default='',          type='string')
    parser.add_option(      '--pseudoDataFromWgt',  dest='pseudoDataFromWgt',  help='pseudo data from dedicated sample',           default='',          type='string')
    parser.add_option(      '--mainHypo',           dest='mainHypo',           help='main hypothesis',                             default=100,         type=float)
    parser.add_option(      '--altHypo',            dest='altHypo',            help='alternative hypothesis',                      default=400,         type=float)
    parser.add_option(      '--altHypoFromSim',     dest='altHypoFromSim',     help='alternative hypothesis to take from systs',   default="",          type='string')
    parser.add_option('-s', '--signal',             dest='signal',             help='signal (csv)',                                default='tbart,Singletop',  type='string')
    parser.add_option(      '--removeNuisances',    dest='rmvNuisances',       help='nuisance group to remove (csv)',              default='',  type='string')
    parser.add_option(      '--freezeNuisances',    dest='frzNuisances',       help='nuisance group to freeze (csv)',              default='',  type='string')
    parser.add_option('-c', '--cat',                dest='cat',                help='categories (csv)',
                      default='EE1blowpt,EE2blowpt,EE1bhighpt,EE2bhighpt,EM1blowpt,EM2blowpt,EM1bhighpt,EM2bhighpt,MM1blowpt,MM2blowpt,MM1bhighpt,MM2bhighpt',
                      type='string')
    parser.add_option('-o', '--output',             dest='output',             help='output directory',                            default='datacards', type='string')
    (opt, args) = parser.parse_args()

    outDir,dataCardList=doDataCards(opt,args)
    scriptname=doCombineScript(opt,args,outDir,dataCardList)
    print 'Running statistical analysis'
    runCombine=Popen(['sh',scriptname],stdout=PIPE,stderr=STDOUT)
    runCombine.communicate()

"""
for execution from another script
"""
if __name__ == "__main__":
    sys.exit(main())
