#ifndef LumiRun_h
#define LumiRun_h

#include "TH1F.h"
#include <map>

class LumiRun {
 public:
  LumiRun() {
    lr_[326381]= 0.220;
    lr_[326382]= 0.074;
    lr_[326383]= 0.071;
    lr_[326384]= 0.286;
    lr_[326389]= 0.058;
    lr_[326392]= 0.643;
    lr_[326398]= 0.905;
    lr_[326476]= 1.051;
    lr_[326477]= 0.218;
    lr_[326478]= 0.879;
    lr_[326479]= 0.263;
    lr_[326480]= 0.266;
    lr_[326482]= 2.266;
    lr_[326483]= 2.258;
    lr_[326499]= 0.456;
    lr_[326500]= 0.446;
    lr_[326501]= 4.442;
    lr_[326502]= 0.267;
    lr_[326503]= 0.279;
    lr_[326504]= 0.598;
    lr_[326507]= 1.567;
    lr_[326511]= 0.154;
    lr_[326512]= 0.146;
    lr_[326520]= 0.000;
    lr_[326521]= 0.596;
    lr_[326524]= 1.253;
    lr_[326525]= 0.325;
    lr_[326526]= 1.008;
    lr_[326527]= 0.437;
    lr_[326528]= 1.850;
    lr_[326530]= 0.919;
    lr_[326531]= 1.040;
    lr_[326532]= 1.292;
    lr_[326533]= 1.909;
    lr_[326534]= 1.026;
    lr_[326535]= 3.740;
    lr_[326545]= 3.334;
    lr_[326546]= 0.804;
    lr_[326547]= 4.223;
    lr_[326548]= 2.788;
    lr_[326549]= 1.796;
    lr_[326550]= 1.671;
    lr_[326568]= 0.652;
    lr_[326569]= 3.364;
    lr_[326571]= 2.886;
    lr_[326572]= 2.171;
    lr_[326573]= 1.421;
    lr_[326574]= 2.792;
    lr_[326575]= 1.027;
    lr_[326576]= 0.164;
    lr_[326577]= 1.461;
    lr_[326580]= 4.428;
    lr_[326585]= 13.694;
    lr_[326586]= 11.458;
    lr_[326587]= 7.738;
    lr_[326617]= 22.962;
    lr_[326619]= 3.508;
    lr_[326620]= 2.168;
    lr_[326622]= 2.983;
    lr_[326623]= 2.714;
    lr_[326627]= 3.261;
    lr_[326635]= 1.789;
    lr_[326636]= 1.220;
    lr_[326722]= 41.491;
    lr_[326776]= 42.955;
    lr_[326790]= 21.774;
    lr_[326791]= 20.032;
    lr_[326815]= 44.429;
    lr_[326822]= 41.566;
    lr_[326854]= 9.388;
    lr_[326855]= 24.719;
    lr_[326856]= 15.681;
    lr_[326859]= 3.026;
    lr_[326883]= 11.896;
    lr_[326884]= 1.469;
    lr_[326885]= 2.057;
    lr_[326886]= 3.184;
    lr_[326887]= 21.581;
    lr_[326897]= 0.103;
    lr_[326941]= 5.363;
    lr_[326942]= 13.890;
    lr_[326943]= 19.513;
    lr_[326961]= 40.639;
    lr_[326965]= 0.958;
    lr_[326998]= 1.132;
    lr_[327004]= 32.908;
    lr_[327077]= 3.639;
    lr_[327078]= 33.849;
    lr_[327123]= 8.235;
    lr_[327125]= 15.139;
    lr_[327126]= 18.104;
    lr_[327147]= 26.856;
    lr_[327148]= 35.263;
    lr_[327173]= 22.465;
    lr_[327174]= 50.320;
    lr_[327211]= 64.809;
    lr_[327219]= 46.209;
    lr_[327220]= 2.168;
    lr_[327237]= 67.304;
    lr_[327238]= 5.456;
    lr_[327264]= 55.550;
    lr_[327327]= 63.240;
    lr_[327400]= 45.291;
    lr_[327402]= 11.592;
    lr_[327403]= 9.093;
    lr_[327424]= 4.011;
    lr_[327430]= 60.739;
    lr_[327431]= 2.879;
    lr_[327455]= 8.001;
    lr_[327462]= 18.656;
    lr_[327464]= 13.616;
    lr_[327488]= 26.395;
    lr_[327489]= 27.498;
    lr_[327495]= 53.985;
    lr_[327516]= 56.428;
    lr_[327517]= 2.692;
    lr_[327524]= 51.521;
    lr_[327525]= 5.105;
    lr_[327526]= 4.931;
    lr_[327527]= 1.196;
    lr_[327537]= 12.019;
    lr_[327554]= 65.789;
    lr_[327560]= 49.466;
    lr_[327564]= 7.519;
  }

  inline float getLumi(Int_t run) {
    if(lr_.find(run)!=lr_.end()) return lr_[run];
    return 0.;
  }

  inline int getRunBin(Int_t run) {
    std::map<Int_t,Float_t>::iterator it=lr_.find(run);
    if(it==lr_.end()) return -1;
    return distance(lr_.begin(),lr_.find(run));
  }
  
  inline TH1F *getLumiMonitor() {
    TH1F *h=new TH1F("lumi",";Run number; #sigma [#mub];",lr_.size(),0,lr_.size());

    int i=0;
    for(std::map<Int_t,Float_t>::iterator it=lr_.begin();
        it!=lr_.end();
        it++) {
      i+=1;
      h->GetXaxis()->SetBinLabel(i,Form("%d",i));
    }              
    return h;
  }


  ~LumiRun() { }

  std::map<Int_t,Float_t> lr_;

};

#endif
